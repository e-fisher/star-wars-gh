{"version":3,"sources":["assets/images/logo.png","assets/images/starfield-bg.png","assets/fonts/StarJedi.woff","assets/fonts/StarJedi.woff2","components/Layout.tsx","components/Button.tsx","components/Search/Form.tsx","services.ts","constants.ts","components/Loader.tsx","components/Search/CharacterMovies.tsx","components/Search/Character.tsx","components/Search/Results.tsx","components/Search/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","yellow","bg","jediFont","textFont","GlobalStyle","createGlobalStyle","jediWoff","jediWoff2","starfieldBg","Container","styled","div","Logo","img","Content","props","Layout","children","src","logo","alt","StyledButton","button","Button","style","onClick","StyledForm","form","Input","input","handleSubmit","setQuery","e","preventDefault","target","query","value","Form","onSubmit","name","placeholder","fontSize","Character","t","films","url","homeworld","species","SearchResults","count","results","fetchSearch","a","fetchCheckOk","check","Planet","population","fetchPlanet","planet","Movie","title","release_date","opening_crawl","fetchMovie","movie","fetchMovies","urls","Promise","all","map","Species","fetchSpecies","fetchMultipleSpecies","fetch","response","ok","Error","json","Spinner","inline","Loader","className","releaseDate","openingCrawl","truncateString","sortDateDesc","array","sort","b","Date","getTime","str","length","substring","CharacterMovies","movieUrls","data","useSWR","JSON","stringify","movies","CharacterRow","Details","Name","h2","homeWorldUrl","speciesUrls","spc","join","useState","showMovies","setShowMovies","Result","Results","characters","character","SearchPage","isQueryValid","trim","SWR_CONFIG","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","App","Search","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e53eed1b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0489f5cd.png\";","export default __webpack_public_path__ + \"static/media/starfield-bg.ac306ea2.png\";","export default __webpack_public_path__ + \"static/media/StarJedi.13d540eb.woff\";","export default __webpack_public_path__ + \"static/media/StarJedi.74a9f1ff.woff2\";","import styled, { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nimport logo from '../assets/images/logo.png'\nimport starfieldBg from '../assets/images/starfield-bg.png'\nimport jediWoff from '../assets/fonts/StarJedi.woff'\nimport jediWoff2 from '../assets/fonts/StarJedi.woff2'\n\nconst theme = {\n  yellow: '#dba90d',\n  bg: '#000',\n  jediFont: 'Star Jedi',\n  textFont: 'Libre Franklin'\n}\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Star Jedi';\n    src: url(${jediWoff}) format('woff2'),\n        url({${jediWoff2}}) format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  body {\n    background: #000 url(${starfieldBg});\n  }\n`\n\nconst Container = styled.div`\n  width: 800px;\n  margin: 0 auto;\n`\n\nconst Logo = styled.img`\n  max-width: 100%;\n  margin-bottom: 50px;\n`\n\nconst Content = styled.div`\n  font-size: 18px;\n  * {\n    color: ${props => props.theme.yellow};\n    font-family: ${props => props.theme.textFont};\n  }\n`\n\nconst Layout = ({ children }: { children: React.ReactNode }) => (\n  <ThemeProvider theme={theme}>\n    <Container>\n      <GlobalStyle />\n      <Logo src={logo} alt=\"logo\" />\n      <Content>\n        {children}\n      </Content>\n    </Container>\n  </ThemeProvider>\n)\n\nexport default Layout\n","import styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  background: ${props => props.theme.yellow};\n  color: ${props => props.theme.bg};\n  border: none;\n  cursor: pointer;\n  padding: 5px 10px;\n  font-family: ${props => props.theme.jediFont};\n`\n\ntype ButtonProps = {\n  children: React.ReactNode,\n  style?: React.CSSProperties,\n  onClick?: (e: React.MouseEvent) => void\n}\n\nconst Button = ({ style, children, onClick }: ButtonProps) => (\n  <StyledButton style={style} onClick={onClick}>\n    {children}\n  </StyledButton>\n)\n\nexport default Button\n","import styled from 'styled-components'\nimport Button from '../Button'\n\nconst StyledForm = styled.form`\n  display: flex;\n  margin-bottom: 20px;\n`\n\nconst Input = styled.input`\n  border: 4px solid ${props => props.theme.yellow};\n  background: transparent;\n  font-weight: bold;\n  font-size: 22px;\n  &:focus {\n    outline: none;\n  }\n  flex-grow: 1;\n  text-align: center;\n`\n\nconst Form = ({ setQuery }: any) => (\n  <StyledForm onSubmit={handleSubmit(setQuery)}>\n    <Input name=\"query\" placeholder=\"Search Star Wars Characters\" />\n    <Button style={{ fontSize: '24px' }}>Submit</Button>\n  </StyledForm>\n)\n\nconst handleSubmit = (setQuery: any) => (e: React.SyntheticEvent) => {\n  e.preventDefault()\n  const target = e.target as typeof e.target & {\n    query: { value: string }\n  }\n  setQuery(target.query.value)\n}\n\nexport default Form\n","import { API_BASE } from \"./constants\"\nimport * as t from 'runtypes'\n\nconst Character = t.Record({\n  name: t.String,\n  films: t.Array(t.String),\n  url: t.String,\n  homeworld: t.String,\n  species: t.Array(t.String)\n})\n\nconst SearchResults = t.Record({\n  count: t.Number,\n  results: t.Array(Character)\n})\n\nexport const fetchSearch = async (query: string) => {\n  const results = await fetchCheckOk(`${API_BASE}/people/?search=${query}`)\n  return SearchResults.check(results)\n}\n\nconst Planet = t.Record({\n  name: t.String,\n  population: t.String,\n})\n\nexport const fetchPlanet = async (url: string) => {\n  const planet = await fetchCheckOk(url)\n  return Planet.check(planet)\n}\n\nexport const Movie = t.Record({\n  title: t.String,\n  release_date: t.String,\n  opening_crawl: t.String,\n  url: t.String,\n})\n\nconst fetchMovie = async (url: string) => {\n  const movie = await fetchCheckOk(url)\n  return Movie.check(movie)\n}\n\nexport const fetchMovies = async (urls: string[]) => {\n  return Promise.all(urls.map((url) => fetchMovie(url)))\n}\n\nconst Species = t.Record({\n  name: t.String\n})\n\nconst fetchSpecies = async (url: string) => {\n  const species = await fetchCheckOk(url)\n  return Species.check(species)\n}\n\nexport const fetchMultipleSpecies = async (urls: string[]) => {\n  return Promise.all(urls.map((url) => fetchSpecies(url)))\n}\n\nconst fetchCheckOk = async (url: string) => {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch ${url}`)\n  }\n  const json = await response.json()\n  return json\n}\n","export const API_BASE = 'https://swapi.dev/api'\n","import styled from 'styled-components'\n// source: https://tobiasahlin.com/spinkit/\n\nconst Spinner = styled.div<{ inline?: boolean }>`\n  margin: ${props => props.inline ? '5px' : '100px auto'};\n  width: 50px;\n  height: 40px;\n  text-align: center;\n  font-size: 10px;\n\n  > div {\n    background-color: ${props => props.theme.yellow};\n    height: 100%;\n    width: 6px;\n    display: inline-block;\n    margin: 0 3px 0 0;\n\n    -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;\n    animation: sk-stretchdelay 1.2s infinite ease-in-out;\n  }\n\n  .rect2 {\n    -webkit-animation-delay: -1.1s;\n    animation-delay: -1.1s;\n  }\n\n  .rect3 {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n\n  .rect4 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n\n  .rect5 {\n    -webkit-animation-delay: -0.8s;\n    animation-delay: -0.8s;\n  }\n\n  @-webkit-keyframes sk-stretchdelay {\n    0%, 40%, 100% { -webkit-transform: scaleY(0.4) }\n    20% { -webkit-transform: scaleY(1.0) }\n  }\n\n  @keyframes sk-stretchdelay {\n    0%, 40%, 100% {\n      transform: scaleY(0.4);\n      -webkit-transform: scaleY(0.4);\n    }  20% {\n      transform: scaleY(1.0);\n      -webkit-transform: scaleY(1.0);\n    }\n  }\n`\n\nconst Loader = ({ inline }: { inline?: boolean }) => (\n  <Spinner inline={inline}>\n    <div className=\"rect1\"></div>\n    <div className=\"rect2\"></div>\n    <div className=\"rect3\"></div>\n    <div className=\"rect4\"></div>\n    <div className=\"rect5\"></div>\n  </Spinner>\n)\n\nexport default Loader\n","import useSWR from 'swr'\n\nimport { MovieType } from '../../interfaces'\nimport { fetchMovies } from \"../../services\"\nimport Loader from '../Loader'\n\nconst CharacterMovies = ({ movieUrls }: { movieUrls: string[] }) => {\n  const { data } = useSWR(JSON.stringify(movieUrls), () => fetchMovies(movieUrls))\n  if (!data) { return <Loader inline /> }\n\n  const movies = sortDateDesc(data).map((movie) => (\n    <Movie\n      key={movie.url}\n      title={movie.title}\n      releaseDate={movie.release_date}\n      openingCrawl={movie.opening_crawl}\n    />\n  ))\n\n  return (\n    <div>{movies}</div>\n  )\n}\n\ntype MovieProps = {\n  title: string,\n  releaseDate: string,\n  openingCrawl: string,\n}\n\nconst Movie = ({ title, releaseDate, openingCrawl }: MovieProps) => {\n  return (\n    <div>\n      <h3>{title} ({releaseDate})</h3>\n      <p>{truncateString(openingCrawl, 150)}</p>\n    </div>\n  )\n}\n\nconst sortDateDesc = (array: MovieType[]) => {\n  return array.sort((a, b) => (\n    new Date(b.release_date).getTime() - new Date(a.release_date).getTime()\n  ))\n}\n\nconst truncateString = (str: string, length: number) => (\n  str.substring(0, length) + (str.length > length ? '...' : '')\n)\n\nexport default CharacterMovies\n","import { useState } from 'react'\nimport useSWR from 'swr'\nimport styled from 'styled-components'\n\nimport { fetchPlanet, fetchMultipleSpecies } from '../../services'\nimport CharacterMovies from './CharacterMovies'\nimport Button from '../Button'\n\nconst CharacterRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  vertical-align: middle;\n  align-items: center;\n`\n\nconst Details = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-grow: 1;\n  margin-right: 10px;\n  align-items: center;\n`\n\nconst Name = styled.h2`\n  font-size: 24px;\n  margin: 0;\n  span {\n    font-size: 16px;\n    font-weight: 300;\n  }\n`\n\ntype CharacterProps = {\n  name: string,\n  homeWorldUrl: string,\n  movieUrls: string[],\n  species: string[],\n}\n\nconst Character = ({ name, homeWorldUrl, movieUrls, species }: CharacterProps) => {\n  const [ showMovies, setShowMovies ] = useState(false)\n  const toggleShowMovies = () => setShowMovies(!showMovies)\n\n  return (\n    <div>\n      <CharacterRow>\n        <Details>\n          <Name>\n            {name} <span><Species speciesUrls={species} /></span>\n          </Name>\n          <Planet homeWorldUrl={homeWorldUrl} />\n        </Details>\n        <Button onClick={toggleShowMovies}>show movies</Button>\n      </CharacterRow>\n\n      {showMovies && (\n        <CharacterMovies movieUrls={movieUrls} />\n      )}\n    </div>\n  )\n}\n\nconst Planet = ({ homeWorldUrl }: { homeWorldUrl: string }) => {\n  const { data: planet } = useSWR(homeWorldUrl, fetchPlanet)\n\n  if (!planet) { return null }\n  return (\n    <div>{planet.name}, pop.: {planet.population}</div>\n  )\n}\n\nconst Species = ({ speciesUrls }: { speciesUrls: string[] }) => {\n  const { data: species } = useSWR(JSON.stringify(speciesUrls), () =>\n    fetchMultipleSpecies(speciesUrls),\n  )\n\n  if (!species) { return null }\n  if (species.length === 0) { return <>Human</> }\n\n  return (\n    <>{species.map(spc => spc.name).join(' ')}</>\n  )\n}\n\nexport default Character\n","import useSWR from 'swr'\nimport styled from 'styled-components'\n\nimport { fetchSearch } from '../../services'\nimport Character from './Character'\nimport Loader from '../Loader'\n\nconst Result = styled.div`\n  border-bottom: 2px solid ${props => props.theme.yellow};\n  padding: 10px 0;\n  &:last-child {\n    border: none;\n  }\n`\n\nconst Results = ({ query }: { query: string }) => {\n  const { data } = useSWR(`/search/${query}`, () => fetchSearch(query))\n\n  if (!data) { return <Loader /> }\n\n  const characters = data.results.map((character) => (\n    <Result>\n      <Character\n        key={character.url}\n        name={character.name}\n        homeWorldUrl={character.homeworld}\n        movieUrls={character.films}\n        species={character.species}\n      />\n    </Result>\n  ))\n\n  return (\n    <div>\n      {characters}\n    </div>\n  )\n}\n\nexport default Results\n","import { useState } from 'react'\nimport Form from './Form'\nimport Results from './Results'\n\nconst SearchPage = () => {\n  const [ query, setQuery ] = useState('')\n  // TODO validate in form\n  const isQueryValid = query && query.trim() !== ''\n\n  return (\n    <div>\n      <Form setQuery={setQuery} />\n\n      {isQueryValid && (\n        <Results query={query} />\n      )}\n    </div>\n  )\n}\n\nexport default SearchPage\n","import { SWRConfig } from 'swr'\n\nimport Layout from './components/Layout'\nimport Search from './components/Search'\n\nconst SWR_CONFIG = {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false,\n}\n\nconst App = () => {\n  return (\n    <SWRConfig value={SWR_CONFIG}>\n      <Layout>\n        <Search />\n      </Layout>\n    </SWRConfig>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}