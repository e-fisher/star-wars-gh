{"version":3,"sources":["assets/images/logo.png","assets/images/starfield-bg.png","assets/fonts/StarJedi.woff","assets/fonts/StarJedi.woff2","components/Layout.tsx","components/Button.tsx","components/Search/Form.tsx","hooks/useFetch.ts","services.ts","constants.ts","components/Loader.tsx","components/Search/CharacterMovies.tsx","components/Search/Character.tsx","components/Search/Pagination.tsx","components/Search/Results.tsx","components/Search/index.tsx","components/ErrorBoundary.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["theme","yellow","bg","jediFont","textFont","GlobalStyle","createGlobalStyle","jediWoff","jediWoff2","starfieldBg","Container","styled","div","Logo","img","Content","props","Layout","children","src","logo","alt","Button","button","StyledForm","form","Input","input","SubmitButton","handleSubmit","setQuery","e","preventDefault","target","query","value","trim","Form","onSubmit","name","placeholder","style","fontSize","useFetch","key","fetcher","useSWR","data","error","Character","t","films","url","homeworld","species","SearchResults","count","results","fetchSearch","a","fetchCheckOk","check","Planet","population","fetchPlanet","planet","Movie","title","release_date","opening_crawl","fetchMovie","movie","fetchMovies","urls","Promise","all","map","Species","fetchSpecies","fetchMultipleSpecies","fetch","response","ok","Error","json","Spinner","inline","Loader","className","releaseDate","openingCrawl","truncateString","sortDateDesc","array","sort","b","Date","getTime","str","length","substring","CharacterMovies","movieUrls","JSON","stringify","movies","CharacterRow","Details","Name","h2","homeWorldUrl","speciesUrls","spc","join","useState","showMovies","setShowMovies","onClick","PageButton","Pagination","page","setPage","perPage","numPages","Math","ceil","pages","Array","from","_","i","pageIndex","disabled","Result","Results","useEffect","characters","character","SearchPage","ErrorBoundary","state","hasError","this","React","Component","SWR_CONFIG","revalidateIfStale","revalidateOnFocus","revalidateOnReconnect","App","Search","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e296a0d6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.0489f5cd.png\";","export default __webpack_public_path__ + \"static/media/starfield-bg.ac306ea2.png\";","export default __webpack_public_path__ + \"static/media/StarJedi.13d540eb.woff\";","export default __webpack_public_path__ + \"static/media/StarJedi.74a9f1ff.woff2\";","import styled, { createGlobalStyle, ThemeProvider } from 'styled-components'\n\nimport logo from '../assets/images/logo.png'\nimport starfieldBg from '../assets/images/starfield-bg.png'\nimport jediWoff from '../assets/fonts/StarJedi.woff'\nimport jediWoff2 from '../assets/fonts/StarJedi.woff2'\n\nconst theme = {\n  yellow: '#dba90d',\n  bg: '#000',\n  jediFont: 'Star Jedi',\n  textFont: 'Libre Franklin'\n}\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face {\n    font-family: 'Star Jedi';\n    src: url(${jediWoff}) format('woff2'),\n        url({${jediWoff2}}) format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n  }\n\n  body {\n    background: #000 url(${starfieldBg});\n  }\n`\n\nconst Container = styled.div`\n  width: 800px;\n  margin: 0 auto;\n`\n\nconst Logo = styled.img`\n  max-width: 100%;\n  margin: 50px 0;\n`\n\nconst Content = styled.div`\n  font-size: 18px;\n  * {\n    color: ${props => props.theme.yellow};\n    font-family: ${props => props.theme.textFont};\n  }\n`\n\nconst Layout = ({ children }: { children: React.ReactNode }) => (\n  <ThemeProvider theme={theme}>\n    <Container>\n      <GlobalStyle />\n      <Logo src={logo} alt=\"logo\" />\n      <Content>\n        {children}\n      </Content>\n    </Container>\n  </ThemeProvider>\n)\n\nexport default Layout\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n  background: ${props => props.theme.yellow};\n  color: ${props => props.theme.bg};\n  border: none;\n  cursor: pointer;\n  padding: 5px 10px;\n  font-family: ${props => props.theme.jediFont};\n`\n\nexport default Button\n","import styled from 'styled-components'\nimport Button from '../Button'\n\nconst StyledForm = styled.form`\n  display: flex;\n  margin-bottom: 20px;\n`\n\nconst Input = styled.input`\n  border: 4px solid ${props => props.theme.yellow};\n  background: transparent;\n  font-weight: bold;\n  font-size: 22px;\n  &:focus {\n    outline: none;\n  }\n  flex-grow: 1;\n  text-align: center;\n`\n\nconst SubmitButton = styled(Button)`\n  font-size: 24px;\n`\n\ntype SetQuery = (query: string) => void\n\nconst Form = ({ setQuery }: { setQuery: SetQuery }) => (\n  <StyledForm onSubmit={handleSubmit(setQuery)}>\n    <Input name=\"query\" placeholder=\"Search Star Wars Characters\" />\n    <SubmitButton style={{ fontSize: '24px' }}>Submit</SubmitButton>\n  </StyledForm>\n)\n\nconst handleSubmit = (setQuery: SetQuery) => (e: React.SyntheticEvent) => {\n  e.preventDefault()\n  const target = e.target as typeof e.target & {\n    query: { value: string }\n  }\n\n  setQuery(target.query.value.trim())\n}\n\nexport default Form\n","import useSWR from 'swr'\n\nexport const useFetch = <T>(key: string, fetcher: (...args: any[]) => Promise<T>) => {\n  const { data, error } = useSWR(key, fetcher)\n\n  if (error) { throw error }\n\n  return { data }\n}\n","import { API_BASE } from \"./constants\"\nimport * as t from 'runtypes'\n\nexport const Character = t.Record({\n  name: t.String,\n  films: t.Array(t.String),\n  url: t.String,\n  homeworld: t.String,\n  species: t.Array(t.String)\n})\n\nconst SearchResults = t.Record({\n  count: t.Number,\n  results: t.Array(Character)\n})\n\nexport const fetchSearch = async (query: string) => {\n  const results = await fetchCheckOk(`${API_BASE}/people/?${query}`)\n  return SearchResults.check(results)\n}\n\nexport const Planet = t.Record({\n  name: t.String,\n  population: t.String,\n})\n\nexport const fetchPlanet = async (url: string) => {\n  const planet = await fetchCheckOk(url)\n  return Planet.check(planet)\n}\n\nexport const Movie = t.Record({\n  title: t.String,\n  release_date: t.String,\n  opening_crawl: t.String,\n  url: t.String,\n})\n\nconst fetchMovie = async (url: string) => {\n  const movie = await fetchCheckOk(url)\n  return Movie.check(movie)\n}\n\nexport const fetchMovies = async (urls: string[]) => {\n  return Promise.all(urls.map((url) => fetchMovie(url)))\n}\n\nexport const Species = t.Record({\n  name: t.String\n})\n\nconst fetchSpecies = async (url: string) => {\n  const species = await fetchCheckOk(url)\n  return Species.check(species)\n}\n\nexport const fetchMultipleSpecies = async (urls: string[]) => {\n  return Promise.all(urls.map((url) => fetchSpecies(url)))\n}\n\nconst fetchCheckOk = async (url: string) => {\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch ${url}`)\n  }\n  const json = await response.json()\n  return json\n}\n","export const API_BASE = 'https://swapi.dev/api'\n","import styled from 'styled-components'\n// source: https://tobiasahlin.com/spinkit/\n\nconst Spinner = styled.div<{ inline?: boolean }>`\n  margin: ${props => props.inline ? '5px' : '100px auto'};\n  width: 50px;\n  height: 40px;\n  text-align: center;\n  font-size: 10px;\n\n  > div {\n    background-color: ${props => props.theme.yellow};\n    height: 100%;\n    width: 6px;\n    display: inline-block;\n    margin: 0 3px 0 0;\n\n    -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;\n    animation: sk-stretchdelay 1.2s infinite ease-in-out;\n  }\n\n  .rect2 {\n    -webkit-animation-delay: -1.1s;\n    animation-delay: -1.1s;\n  }\n\n  .rect3 {\n    -webkit-animation-delay: -1.0s;\n    animation-delay: -1.0s;\n  }\n\n  .rect4 {\n    -webkit-animation-delay: -0.9s;\n    animation-delay: -0.9s;\n  }\n\n  .rect5 {\n    -webkit-animation-delay: -0.8s;\n    animation-delay: -0.8s;\n  }\n\n  @-webkit-keyframes sk-stretchdelay {\n    0%, 40%, 100% { -webkit-transform: scaleY(0.4) }\n    20% { -webkit-transform: scaleY(1.0) }\n  }\n\n  @keyframes sk-stretchdelay {\n    0%, 40%, 100% {\n      transform: scaleY(0.4);\n      -webkit-transform: scaleY(0.4);\n    }  20% {\n      transform: scaleY(1.0);\n      -webkit-transform: scaleY(1.0);\n    }\n  }\n`\n\nconst Loader = ({ inline }: { inline?: boolean }) => (\n  <Spinner inline={inline}>\n    <div className=\"rect1\"></div>\n    <div className=\"rect2\"></div>\n    <div className=\"rect3\"></div>\n    <div className=\"rect4\"></div>\n    <div className=\"rect5\"></div>\n  </Spinner>\n)\n\nexport default Loader\n","import { useFetch } from '../../hooks/useFetch'\nimport { MovieType } from '../../interfaces'\nimport { fetchMovies } from \"../../services\"\nimport Loader from '../Loader'\n\nconst CharacterMovies = ({ movieUrls }: { movieUrls: string[] }) => {\n  const { data } = useFetch(JSON.stringify(movieUrls), () => fetchMovies(movieUrls))\n  if (!data) { return <Loader inline /> }\n\n  const movies = sortDateDesc(data).map((movie) => (\n    <Movie\n      key={movie.url}\n      title={movie.title}\n      releaseDate={movie.release_date}\n      openingCrawl={movie.opening_crawl}\n    />\n  ))\n\n  return (\n    <div>{movies}</div>\n  )\n}\n\ntype MovieProps = {\n  title: string,\n  releaseDate: string,\n  openingCrawl: string,\n}\n\nconst Movie = ({ title, releaseDate, openingCrawl }: MovieProps) => {\n  return (\n    <div>\n      <h3>{title} ({releaseDate})</h3>\n      <p>{truncateString(openingCrawl, 150)}</p>\n    </div>\n  )\n}\n\nconst sortDateDesc = (array: MovieType[]) => {\n  return array.sort((a, b) => (\n    new Date(b.release_date).getTime() - new Date(a.release_date).getTime()\n  ))\n}\n\nconst truncateString = (str: string, length: number) => (\n  str.substring(0, length) + (str.length > length ? '...' : '')\n)\n\nexport default CharacterMovies\n","import { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { useFetch } from '../../hooks/useFetch'\nimport { fetchPlanet, fetchMultipleSpecies } from '../../services'\nimport CharacterMovies from './CharacterMovies'\nimport Button from '../Button'\n\nconst CharacterRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  vertical-align: middle;\n  align-items: center;\n`\n\nconst Details = styled.div`\n  display: flex;\n  justify-content: space-between;\n  flex-grow: 1;\n  margin-right: 10px;\n  align-items: center;\n`\n\nconst Name = styled.h2`\n  font-size: 24px;\n  margin: 0;\n  span {\n    font-size: 16px;\n    font-weight: 300;\n  }\n`\n\ntype CharacterProps = {\n  name: string,\n  homeWorldUrl: string,\n  movieUrls: string[],\n  species: string[],\n}\n\nconst Character = ({ name, homeWorldUrl, movieUrls, species }: CharacterProps) => {\n  const [ showMovies, setShowMovies ] = useState(false)\n  const toggleShowMovies = () => setShowMovies(!showMovies)\n\n  return (\n    <div>\n      <CharacterRow>\n        <Details>\n          <Name>\n            {name} <span><Species speciesUrls={species} /></span>\n          </Name>\n          <Planet homeWorldUrl={homeWorldUrl} />\n        </Details>\n        <Button onClick={toggleShowMovies}>show movies</Button>\n      </CharacterRow>\n\n      {showMovies && (\n        <CharacterMovies movieUrls={movieUrls} />\n      )}\n    </div>\n  )\n}\n\nconst Planet = ({ homeWorldUrl }: { homeWorldUrl: string }) => {\n  const { data: planet } = useFetch(homeWorldUrl, fetchPlanet)\n\n  if (!planet) { return null }\n  return (\n    <div>{planet.name}, pop.: {planet.population}</div>\n  )\n}\n\nconst Species = ({ speciesUrls }: { speciesUrls: string[] }) => {\n  const { data: species } = useFetch(JSON.stringify(speciesUrls), () =>\n    fetchMultipleSpecies(speciesUrls),\n  )\n\n  if (!species) { return null }\n  if (species.length === 0) { return <>Human</> }\n\n  return (\n    <>{species.map(spc => spc.name).join(' ')}</>\n  )\n}\n\nexport default Character\n","import styled from \"styled-components\"\n\nconst Container = styled.div`\n  margin: 10px 0;\n  text-align: center;\n`\n\n\nconst PageButton = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 20px;\n\n  &:disabled {\n    text-decoration: underline;\n    cursor: default;\n  }\n`\n\ntype PaginationProps = {\n  count: number,\n  page: number,\n  setPage: (page: number) => void,\n  perPage?: number,\n}\n\nconst Pagination = ({ count, page, setPage, perPage = 10 }: PaginationProps) => {\n  const numPages = Math.ceil(count / perPage)\n\n  if (numPages === 1) { return null }\n\n  const pages = Array.from(Array(numPages)).map((_, i) => {\n    const pageIndex = i + 1\n\n    return (\n      <PageButton onClick={() => setPage(pageIndex)} disabled={page === pageIndex} key={pageIndex}>\n        {pageIndex}\n      </PageButton>\n    )\n  })\n\n  return (\n    <Container>\n      {pages}\n    </Container>\n  )\n}\n\nexport default Pagination\n","import styled from 'styled-components'\nimport { useState, useEffect } from 'react'\n\nimport { useFetch } from '../../hooks/useFetch'\nimport { fetchSearch } from '../../services'\nimport Character from './Character'\nimport Loader from '../Loader'\nimport Pagination from './Pagination'\n\nconst Result = styled.div`\n  border-bottom: 2px solid ${props => props.theme.yellow};\n  padding: 10px 0;\n  &:last-child {\n    border: none;\n  }\n`\n\nconst Results = ({ query }: { query: string }) => {\n  const [page, setPage] = useState(1)\n  const { data } = useFetch(`search=${query}&page=${page}`, fetchSearch)\n\n  useEffect(() => {\n    setPage(1)\n  }, [query, setPage])\n\n  if (!data) { return <Loader /> }\n\n  if (data.results.length === 0) {\n    return <div>No results - try different keyword</div>\n  }\n\n  const characters = data.results.map((character) => (\n    <Result key={character.url}>\n      <Character\n        name={character.name}\n        homeWorldUrl={character.homeworld}\n        movieUrls={character.films}\n        species={character.species}\n      />\n    </Result>\n  ))\n\n  return (\n    <div>\n      <div>{characters}</div>\n      <div>\n        <Pagination count={data.count} setPage={setPage} page={page} />\n      </div>\n    </div>\n  )\n}\n\nexport default Results\n","import { useState } from 'react'\nimport Form from './Form'\nimport Results from './Results'\n\nconst SearchPage = () => {\n  const [ query, setQuery ] = useState('')\n\n  return (\n    <div>\n      <Form setQuery={setQuery} />\n\n      {query && (\n        <Results query={query} />\n      )}\n    </div>\n  )\n}\n\nexport default SearchPage\n","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n  state = {\n    hasError: false\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary\n","import { SWRConfig } from 'swr'\n\nimport Layout from './components/Layout'\nimport Search from './components/Search'\nimport ErrorBoundary from './components/ErrorBoundary'\n\nconst SWR_CONFIG = {\n  revalidateIfStale: false,\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false,\n}\n\nconst App = () => {\n  return (\n    <SWRConfig value={SWR_CONFIG}>\n      <Layout>\n        <ErrorBoundary>\n          <Search />\n        </ErrorBoundary>\n      </Layout>\n    </SWRConfig>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}